{
	"format_version": "1.10.0",
	"animation_controllers": {
		"controller.animation.add_moving_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.ground_speed > 0"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "query.ground_speed == 0"
						}
					],
                    "on_entry": [
                        "/tag @s add moving"
                    ],
                    "on_exit": [
                        "/tag @s remove moving"
                    ]
				}
			}
		},
		"controller.animation.add_riding_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_riding"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_riding"
						}
					],
                    "on_entry": [
                        "/tag @s add riding"
                    ],
                    "on_exit": [
                        "/tag @s remove riding"
                    ]
				}
			}
		},
		"controller.animation.add_tame_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_tamed"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						}
					],
                    "on_entry": [
                        "/tag @s add tamed"
                    ],
                    "on_exit": [
                        "/tag @s remove tamed"
                    ]
				}
			}
		},
        "controller.animation.add_baby_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_baby"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_baby"
						}
					],
                    "on_entry": [
                        "/tag @s add baby"
                    ],
                    "on_exit": [
                        "/tag @s remove baby"
                    ]
				}
			}
		},
        "controller.animation.add_ridden_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.has_rider"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.has_rider"
						}
					],
                    "on_entry": [
                        "/tag @s add ridden"
                    ],
                    "on_exit": [
                        "/tag @s remove ridden"
                    ]
				}
			}
		},
		"controller.animation.add_sheared_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_sheared"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_sheared"
						}
					],
                    "on_entry": [
                        "/tag @s add sheared"
                    ],
                    "on_exit": [
                        "/tag @s remove sheared"
                    ]
				}
			}
		},
		"controller.animation.add_powered_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_powered"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_powered"
						}
					],
                    "on_entry": [
                        "/tag @s add powered"
                    ],
                    "on_exit": [
                        "/tag @s remove powered"
                    ]
				}
			}
		},
		"controller.animation.add_ignited_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_ignited"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_ignited"
						}
					],
                    "on_entry": [
                        "/tag @s add ignited"
                    ],
                    "on_exit": [
                        "/tag @s remove ignited"
                    ]
				}
			}
		},
		"controller.animation.add_illager_captain_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_illager_captain"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_illager_captain"
						}
					],
                    "on_entry": [
                        "/tag @s add illagerCaptain"
                    ],
                    "on_exit": [
                        "/tag @s remove illagerCaptain"
                    ]
				}
			}
		},
		"controller.animation.add_roaring_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_roaring"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_roaring"
						}
					],
                    "on_entry": [
                        "/tag @s add roaring"
                    ],
                    "on_exit": [
                        "/tag @s remove roaring"
                    ]
				}
			}
		},
		"controller.animation.add_sonic_boom_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_sonic_boom"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_sonic_boom"
						}
					],
                    "on_entry": [
                        "/tag @s add sonicBoom"
                    ],
                    "on_exit": [
                        "/tag @s remove sonicBoom"
                    ]
				}
			}
		},
		"controller.animation.add_sleeping_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_sleeping"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_sleeping"
						}
					],
                    "on_entry": [
                        "/tag @s add sleeping"
                    ],
                    "on_exit": [
                        "/tag @s remove sleeping"
                    ]
				}
			}
		},
		"controller.animation.add_has_target_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.has_target"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.has_target"
						}
					],
                    "on_entry": [
                        "/tag @s add hasTarget"
                    ],
                    "on_exit": [
                        "/tag @s remove hasTarget"
                    ]
				}
			}
		},
		"controller.animation.add_in_water_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_in_water"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_in_water"
						}
					],
                    "on_entry": [
                        "/tag @s add inWater"
                    ],
                    "on_exit": [
                        "/tag @s remove inWater"
                    ]
				}
			}
		},
		"controller.animation.add_in_love_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.is_in_love"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.is_in_love"
						}
					],
                    "on_entry": [
                        "/tag @s add inLove"
                    ],
                    "on_exit": [
                        "/tag @s remove inLove"
                    ]
				}
			}
		},
		"controller.animation.add_hypnotized_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.property('rift:is_hypnotized') == true"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "query.property('rift:is_hypnotized') == false"
						}
					],
                    "on_entry": [
                        "/tag @s add hypnotized"
                    ],
                    "on_exit": [
                        "/tag @s remove hypnotized"
                    ]
				}
			}
		},
		"controller.animation.add_out_of_control_tag": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"hasTag": "query.out_of_control"
						}
					]
				},
				"hasTag": {
					"transitions": [
						{
							"default": "!query.out_of_control"
						}
					],
                    "on_entry": [
                        "/tag @s add outOfControl"
                    ],
                    "on_exit": [
                        "/tag @s remove outOfControl"
                    ]
				}
			}
		},
		"controller.animation.become_unsittable_when_ridden": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"ridden": "query.has_rider"
						}
					]
				},
				"ridden": {
					"transitions": [
						{
							"default": "!query.has_rider"
						}
					],
                    "on_entry": [
                        "@s rift:cannot_sit",
                        "@s borgy:cannot_sit"
                    ],
                    "on_exit": [
                        "@s rift:can_sit",
                        "@s borgy:can_sit"
                    ]
				}
			}
		},
		"controller.animation.manage_tame_state": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"standing": "query.is_tamed && query.property('rift:tame_state') == 0"
						},
						{
							"sitting": "query.is_tamed && query.property('rift:tame_state') == 1"
						},
						{
							"wandering": "query.is_tamed && query.property('rift:tame_state') == 2"
						}
					]
				},
				"standing": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"sitting": "query.property('rift:tame_state') == 1"
						},
						{
							"wandering": "query.property('rift:tame_state') == 2"
						}
					],
					"on_entry": [
						"@s rift:on_standing"
					]
				},
				"sitting": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"standing": "query.property('rift:tame_state') == 0"
						},
						{
							"wandering": "query.property('rift:tame_state') == 2"
						}
					],
					"on_entry": [
						"@s rift:on_sitting"
					]
				},
				"wandering": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"standing": "query.property('rift:tame_state') == 0"
						},
						{
							"sitting": "query.property('rift:tame_state') == 1"
						}
					],
					"on_entry": [
						"@s rift:on_wandering"
					]
				}
			}
		},
		"controller.animation.manage_tame_behavior": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"assist": "query.is_tamed && query.property('rift:behavior_state') == 0"
						},
						{
							"neutral": "query.is_tamed && query.property('rift:behavior_state') == 1"
						},
						{
							"aggressive": "query.is_tamed && query.property('rift:behavior_state') == 2"
						},
						{
							"passive": "query.is_tamed && query.property('rift:behavior_state') == 3"
						}
					]
				},
				"assist": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"neutral": "query.property('rift:behavior_state') == 1"
						},
						{
							"aggressive": "query.property('rift:behavior_state') == 2"
						},
						{
							"passive": "query.property('rift:behavior_state') == 3"
						}
					],
					"on_entry": [
						"@s rift:on_assist_behavior"
					]
				},
				"neutral": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"assist": "query.property('rift:behavior_state') == 0"
						},
						{
							"aggressive": "query.property('rift:behavior_state') == 2"
						},
						{
							"passive": "query.property('rift:behavior_state') == 3"
						}
					],
					"on_entry": [
						"@s rift:on_neutral_behavior"
					]
				},
				"aggressive": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"assist": "query.property('rift:behavior_state') == 0"
						},
						{
							"neutral": "query.property('rift:behavior_state') == 1"
						},
						{
							"passive": "query.property('rift:behavior_state') == 3"
						}
					],
					"on_entry": [
						"@s rift:on_aggressive_behavior"
					]
				},
				"passive": {
					"transitions": [
						{
							"default": "!query.is_tamed"
						},
						{
							"assist": "query.property('rift:behavior_state') == 0"
						},
						{
							"neutral": "query.property('rift:behavior_state') == 1"
						},
						{
							"aggressive": "query.property('rift:behavior_state') == 2"
						}
					],
					"on_entry": [
						"@s rift:on_passive_behavior"
					]
				}
			}
		},
		"controller.animation.general_forced_attack": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"forcedAttacking": "query.property('rift:is_forced_attacking') == true"
						}
					]
				},
				"forcedAttacking": {
					"animations": [
						"animForcedAttack"
					],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				}
			}
		},
		"controller.animation.general_eat_from_inventory_cooldown": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"cooldown": "query.property('rift:eat_from_inventory_cooldown') == true"
						}
					]
				},
				"cooldown": {
					"animations": [
						"animEatFromInventoryCooldown"
					],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					],
					"on_entry": [
						"/tag @s add eatFromInventoryCooldown"
					],
					"on_exit": [
						"/tag @s remove eatFromInventoryCooldown"
					]
				}
			}
		},
		"controller.animation.general_die_without_tenontosaurus": {
			"initial_state": "default",
			"states": {
				"default": {
					"animations": [
						"animFindTenontosaurus"
					],
					"transitions": [
						{
							"timer": "v.tenonto == 0 && query.property('rift:is_hypnotized') == true"
						}
					]
				},
				"timer": {
					"animations": [
						"animFindTenontosaurus",
						"animDeathTimer"
					],
					"transitions": [
						{
							"default": "v.tenonto > 0"
						}
					]
				}
			}
		}
	}
}