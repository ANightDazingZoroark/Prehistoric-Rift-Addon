{
    "format_version": "1.10.0",
    "animation_controllers": {
        "controller.animation.wild_direwolf_pack_buff": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "find_friends": "query.has_target && !query.is_tamed && query.property('rift:is_hypnotized') == false"
                        }
                    ]
                },
                "find_friends": {
                    "on_entry": [
                        "v.x = 0.0; for_each(t.direwolf, query.get_nearby_entities_except_self(16, 'rift:direwolf'), { v.x = v.x + !(t.direwolf -> query.is_tamed); });",
                        "v.chance = Math.random_integer(0, 2);"
                    ],
                    "transitions": [
                        {
                            "use_buff": "v.chance == 0 && v.x >= 3"
                        },
                        {
                            "default": "!query.has_target || query.property('rift:is_hypnotized') == true"
                        }
                    ]
                },
                "use_buff": {
                    "on_entry": [
                        "@s rift:wild_direwolf_buffing"
                    ],
                    "transitions": [
                        {
                            "default": "!query.has_target || query.property('rift:is_hypnotized') == true"
                        }
                    ]
                }
            }
        },
        "controller.animation.wild_direwolf_remove_buffs": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "buffs": "query.has_target && !query.is_tamed"
                        }
                    ]
                },
                "buffs": {
                    "on_exit": [
						"/effect @s speed 0",
						"/effect @s strength 0"
                    ],
                    "transitions": [
                        {
                            "default": "!query.has_target || query.is_tamed"
                        }
                    ]
                }
            }
        },
        "controller.animation.direwolf_forced_attack": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
                        {
                            "normalMode": "!query.is_ignited"
                        },
                        {
                            "werewolfMode": "query.is_ignited"
                        }
					]
				},
                "normalMode": {
					"transitions": [
						{
							"bitingNormal": "query.property('rift:forced_attack_mode') == 1"
						},
                        {
                            "werewolfMode": "query.is_ignited"
                        }
					]
				},
                "werewolfMode": {
					"transitions": [
						{
							"bitingWerewolf": "query.property('rift:forced_attack_mode') == 1"
						},
						{
							"slashingOne": "v.chooseArm = (math.floor(math.random(0,2))); return v.chooseArm == 0 && query.property('rift:forced_attack_mode') == 2;"
						},
						{
							"slashingTwo": "v.chooseArm == 1 && query.property('rift:forced_attack_mode') == 2"
						},
						{
							"breath": "query.property('rift:forced_attack_mode') == 3"
						},
                        {
                            "normalMode": "!query.is_ignited"
                        }
					]
				},
				"bitingNormal": {
                    "animations": [
                        "animForcedAttackNormal"
                    ],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				},
				"bitingWerewolf": {
                    "animations": [
                        "animForcedAttackBiteWerewolf"
                    ],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				},
				"slashingOne": {
                    "animations": [
                        "animForcedAttackSlashWerewolfOne"
                    ],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				},
				"slashingTwo": {
                    "animations": [
                        "animForcedAttackSlashWerewolfTwo"
                    ],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				},
				"breath": {
                    "animations": [
                        "animForcedAttackBreathWerewolf"
                    ],
					"transitions": [
						{
							"default": "query.all_animations_finished"
						}
					]
				}
			}
		},
        "controller.animation.direwolf_transform": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "transformed": "query.property('rift:forced_transform') == true || (!query.biome_has_any_tag('nether', 'the_end') && !query.is_illager_captain && query.out_of_control && ((query.time_of_day >= 0.75) || (query.time_of_day < 0.25)))"
                        }
                    ]
                },
                "transformed": {
                    "transitions": [
                        {
                            "default": "query.biome_has_any_tag('nether', 'the_end') || (query.property('rift:forced_transform') == false && (query.time_of_day < 0.75) && (query.time_of_day >= 0.25))"
                        }
                    ],
                    "on_entry": [
                        "@s rift:transform_into_werewolf"
                    ],
                    "on_exit": [
                        "@s rift:transform_into_normal"
                    ]
                }
            }
        },
        "controller.animation.direwolf_untransformability_management": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "cannotTransform": "query.is_illager_captain"
                        }
                    ]
                },
                "cannotTransform": {
                    "transitions": [
                        {
                            "default": "query.biome_has_any_tag('nether', 'the_end') || ((query.time_of_day < 0.75) && (query.time_of_day >= 0.25))"
                        }
                    ],
                    "on_exit": [
                        "@s rift:can_transform_again"
                    ]
                }
            }
        },
        "controller.animation.direwolf_forced_transform_management": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "forcedTransform": "query.property('rift:forced_transform') == true"
                        }
                    ]
                },
                "forcedTransform": {
                    "animations": [
                        "animForcedTransformCountdown"
                    ],
                    "transitions": [
                        {
                            "default": "query.all_animations_finished"
                        }
                    ],
                    "on_exit": [
                        "@s rift:stop_forced_transform"
                    ]
                }
            }
        },
        "controller.animation.direwolf_werewolf_switch_between_melee_attacks": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "chooseAttack": "query.has_target && query.is_sheared"
                        }
                    ]
                },
                "chooseAttack": {
                    "transitions": [
                        {
                            "bite": "v.attackMode = (math.floor(math.random(0,2))); return v.attackMode == 0;"
                        },
                        {
                            "claw": "v.attackMode == 1"
                        }
                    ]
                },
                "bite": {
                    "transitions": [
                        {
                            "biteLimbo": "query.is_delayed_attacking"
                        },
                        {
                            "default": "!query.has_target || !query.is_sheared"
                        }
                    ],
                    "on_entry": [
                        "@s rift:can_use_bite_werewolf"
                    ]
                },
                "biteLimbo": {
                    "transitions": [
                        {
                            "bite": "v.attackMode = (math.floor(math.random(0,2))); return !query.is_delayed_attacking && v.attackMode == 0;"
                        },
                        {
                            "claw": "!query.is_delayed_attacking && v.attackMode == 1"
                        },
                        {
                            "default": "!query.has_target || !query.is_sheared"
                        }
                    ],
                    "on_exit": [
                        "@s rift:cannot_use_bite_werewolf"
                    ]
                },
                "claw": {
                    "transitions": [
                        {
                            "clawLimbo": "query.is_delayed_attacking"
                        },
                        {
                            "default": "!query.has_target || !query.is_sheared"
                        }
                    ],
                    "on_entry": [
                        "@s rift:can_use_claw_werewolf"
                    ]
                },
                "clawLimbo": {
                    "transitions": [
                        {
                            "bite": "v.attackMode = (math.floor(math.random(0,2))); return !query.is_delayed_attacking && v.attackMode == 0;"
                        },
                        {
                            "claw": "!query.is_delayed_attacking && v.attackMode == 1"
                        },
                        {
                            "default": "!query.has_target || !query.is_sheared"
                        }
                    ],
                    "on_exit": [
                        "@s rift:cannot_use_claw_werewolf"
                    ]
                }
            }
        },
        "controller.animation.direwolf_werewolf_breath_management": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "breath": "query.is_sonic_boom"
                        },
                        {
                            "breathCooldown": "query.property('rift:sonic_boom_cooldown') == true"
                        },
                        {
                            "cannotBreath": "query.is_ignited && !query.is_baby && (!query.is_on_ground || query.is_in_water)"
                        }
                    ]
                },
                "breath": {
                    "animations": [
                        "animDirewolfBreathCountdown"
                    ],
                    "on_entry": [
                        "@s rift:cannot_move_while_sonic_boom"
                    ],
                    "on_exit": [
                        "@s rift:can_move_after_sonic_boom"
                    ],
                    "transitions": [
                        {
                            "default": "query.all_animations_finished"
                        },
                        {
                            "cannotBreath": "!query.is_on_ground || query.is_in_water"
                        }
                    ]
                },
                "breathCooldown": {
                    "animations": [
                        "animDirewolfBreathCooldown"
                    ],
                    "on_exit": [
                        "@s rift:end_sonic_boom_cooldown"
                    ],
                    "transitions": [
                        {
                            "default": "query.all_animations_finished"
                        }
                    ]
                },
                "cannotBreath": {
                    "on_entry": [
                        "@s rift:disable_sonic_boom"
                    ],
                    "on_exit": [
                        "@s rift:reenable_sonic_boom"
                    ],
                    "transitions": [
                        {
                            "default": "query.is_on_ground && !query.is_in_water"
                        }
                    ]
                }
            }
        }
    }
}