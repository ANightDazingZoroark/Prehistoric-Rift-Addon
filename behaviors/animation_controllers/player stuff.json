{
	"format_version": "1.10.0",
	"animation_controllers": {
		"controller.animation.attach_riders_to_apato": {
			"initial_state": "default",
			"states": {
				"default": {
					"transitions": [
						{
							"attachRiders": "query.is_jumping && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'rift:apatosaurus'"
						}
                    ]
                },
                "attachRiders": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        },
                        {
                            "limboOne": "!query.is_jumping"
                        }
                    ],
                    "on_entry": [
                        "/tag @e[type=rift:apatosaurus, c=1] add apatoAddRiders",
                        "/execute as @e[type=rift:apatosaurus, c=1] run tellraw @p[c=1] {\"rawtext\":[{\"text\":\"Picked up passengers\"}]}"
                    ]
                },
                "limboOne": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        },
                        {
                            "evictRiders": "query.is_jumping"
                        }
                    ]
                },
                "evictRiders": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        },
                        {
                            "limboTwo": "!query.is_jumping"
                        }
                    ],
                    "on_entry": [
                        "/tag @e[type=rift:apatosaurus, c=1] add apatoRemoveRiders",
                        "/execute as @e[type=rift:apatosaurus, c=1] run tellraw @p[c=1] {\"rawtext\":[{\"text\":\"Removed passengers\"}]}"
                    ]
                },
                "limboTwo": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        },
                        {
                            "attachRiders": "query.is_jumping"
                        }
                    ]
                }
			}
        },
        "controller.animation.ride_stego": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "has_rider": "query.is_riding ? (query.get_ride -> query.owner_identifier) == 'rift:stegosaurus'"
                        }
                    ]
                },
                "has_rider": {
                    "on_entry": [
                        "@s rift:riding_stego"
                    ],
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        }
                    ],
                    "on_exit": [
                        "@s rift:not_riding_stego"
                    ]
                }
            }
        },
        "controller.animation.swimming_mount_toggle_swim_mode": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "descending": "(query.is_riding && ((query.is_riding ? (query.get_ride -> query.owner_identifier) == 'rift:sarcosuchus') || (query.is_riding ? (query.get_ride -> query.owner_identifier) == 'rift:anomalocaris') || (query.is_riding ? (query.get_ride -> query.owner_identifier) == 'rift:baryonyx')) && (query.is_riding ? (query.get_ride -> query.is_saddled)))"
                        }
                    ],
                    "on_exit": [
                        "/event entity @e[tag=waterMountHasRider, c=1, tag=tamed] rift:float_to_swim"
                    ]
                },
                "descending": {
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0) || (query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        },
                        {
                            "ascending": "query.is_jumping"
                        }
                    ],
                    "on_entry": [
                        "/effect @e[c=1, tag=waterMountHasRider, tag=tamed] levitation 0 0"
                    ]
                },
                "jumpCooldown": {
					"transitions": [
                        {
							"hovering": "return query.is_jumping && query.life_time - variable.jump_cooldown < 0.5;"
						},
						{
							"descending": "return !query.is_jumping && query.life_time - variable.jump_cooldown > 0.5;"
						}
					],
                    "on_entry": [
                        "/effect @e[c=1, tag=waterMountHasRider, tag=tamed] levitation 0 0"
                    ]
                },
                "ascending": {
                    "animations": [
						"animWaterMountAscend"
					],
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0)"
                        },
                        {
                            "descending": "(query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        },
                        {
                            "jumpCooldown": "variable.jump_cooldown = query.life_time; return (!query.is_jumping);"
                        }
                    ]
                },
                "hovering": {
                    "on_entry": [
                        "/event entity @e[tag=waterMountHasRider, c=1, tag=tamed] rift:swim_to_float",
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Enabled hover mode\"}]}"
                    ],
                    "on_exit": [
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Disabled hover mode\"}]}",
                        "/event entity @e[tag=waterMountHasRider, c=1, tag=tamed] rift:float_to_swim"
                    ],
                    "transitions": [
                        {
                            "ascending": "return query.life_time - variable.jump_cooldown > 1 && (query.is_jumping == 1.0);"
                        },
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        }
                    ]
                }
            }
        },
        "controller.animation.pass_invisibility_to_player": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "hide": "query.is_riding ? (query.get_ride -> query.is_invisible)"
                        }
                    ]
                },
                "hide": {
                    "animations": [
                        "animInvisibility"
                    ],
                    "transitions": [
                        {
                            "default": "!query.is_riding || !(query.get_ride -> query.is_invisible)"
                        }
                    ]
                }
            }
        },
        "controller.animation.noon_test": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "noon": "query.is_stunned && query.time_of_day >= 0.49 && query.time_of_day < 0.51"
                        }
                    ]
                },
                "noon": {
                    "transitions": [                   
                        {
                            "mobEvents": "variable.choose_number = (math.floor(math.random(0,16))); return variable.choose_number == 0;"
                        },
                        {
                            "limbo": "variable.choose_number >= 1"
                        }
                    ]
                },
                "mobEvents": {
                    "transitions": [
                        {
                            "raptorAttack": "variable.choose_event = (math.floor(math.random(0,5))); return variable.choose_event == 0;"
                        },
                        {
                            "piranhaSwarm": "variable.choose_event == 1"
                        },
                        {
                            "wolfHunt": "variable.choose_event == 2"
                        },
                        {
                            "herbivoreStampede": "variable.choose_event == 3"
                        },
                        {
                            "theFlood": "variable.choose_event == 4"
                        }
                    ]
                },
                "raptorAttack": {
                    "animations": [
                        "animRaptorRaid"
                    ],
                    "transitions": [
                        {
                            "limbo": "query.all_animations_finished"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Raptor Raid event has started!\"}]}",
                        "/playsound raid.horn @a",
                        "/title @a title Raptor Raid!",
                        "/title @a subtitle Utahraptors are on the hunt, and you are the prey!"
                    ],
                    "on_exit": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Raptor Raid is no longer spawning mobs!\"}]}"
                    ]
                },
                "piranhaSwarm": {
                    "animations": [
                        "animPiranhaSwarm"
                    ],
                    "transitions": [
                        {
                            "limbo": "query.all_animations_finished"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Piranha Swarm event has started!\"}]}",
                        "/playsound raid.horn @a",
                        "/title @a title Piranha Swarm!",
                        "/title @a subtitle Megapiranhas are rising from the aquifers below!"
                    ],
                    "on_exit": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Piranha Swarm is no longer spawning mobs!\"}]}"
                    ]
                },
                "wolfHunt": {
                    "animations": [
                        "animWolfHunt"
                    ],
                    "transitions": [
                        {
                            "limbo": "query.all_animations_finished"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Wolf Hunt event has started!\"}]}",
                        "/playsound raid.horn @a",
                        "/title @a title Wolf Hunt!",
                        "/title @a subtitle Wolves are out on the prowl, in search of prey!"
                    ],
                    "on_exit": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Wolf Hunt is no longer spawning mobs!\"}]}"
                    ]
                },
                "herbivoreStampede": {
                    "animations": [
                        "animHerbivoreStampede"
                    ],
                    "transitions": [
                        {
                            "limbo": "query.all_animations_finished"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Herbivore Stampede event has started!\"}]}",
                        "/playsound raid.horn @a",
                        "/title @a title Herbivore Stampede!",
                        "/titleraw @a subtitle {\"rawtext\": [{\"text\": \"Enraged herbivores are out \nto take out their anger!\"}]}"
                    ],
                    "on_exit": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Herbivore Stampede is no longer spawning mobs!\"}]}"
                    ]
                },
                "theFlood": {
                    "animations": [
                        "animTheFlood"
                    ],
                    "transitions": [
                        {
                            "limbo": "query.all_animations_finished"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"The Flood event has started!\"}]}",
                        "/playsound raid.horn @a",
                        "/title @a title The Flood!",
                        "/titleraw @a subtitle {\"rawtext\": [{\"text\": \"Downpour and river monsters!\"}]}",
                        "/weather thunder 1000"
                    ],
                    "on_exit": [
                        "/tellraw @a {\"rawtext\":[{\"text\":\"Herbivore Stampede is no longer spawning mobs!\"}]}"
                    ]
                },
                "limbo": {
                    "transitions": [
                        {
                            "default": "query.time_of_day < 0.49 || query.time_of_day >= 0.51"
                        }
                    ]
                }
            }
        },
        "controller.animation.cardinal_facing": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "north": "query.cardinal_facing_2d == 2"
                        },
                        {
                            "south": "query.cardinal_facing_2d == 3"
                        },
                        {
                            "west": "query.cardinal_facing_2d == 4"
                        },
                        {
                            "east": "query.cardinal_facing_2d == 5"
                        }
                    ]
                },
                "north": {
                    "on_entry": [
                        "/say 0"
                    ],
                    "transitions": [
                        {
                            "south": "query.cardinal_facing_2d == 3"
                        },
                        {
                            "west": "query.cardinal_facing_2d == 4"
                        },
                        {
                            "east": "query.cardinal_facing_2d == 5"
                        }
                    ]
                },
                "south": {
                    "on_entry": [
                        "/say 1"
                    ],
                    "transitions": [
                        {
                            "north": "query.cardinal_facing_2d == 2"
                        },
                        {
                            "west": "query.cardinal_facing_2d == 4"
                        },
                        {
                            "east": "query.cardinal_facing_2d == 5"
                        }
                    ]
                },
                "west": {
                    "on_entry": [
                        "/say 2"
                    ],
                    "transitions": [
                        {
                            "north": "query.cardinal_facing_2d == 2"
                        },
                        {
                            "south": "query.cardinal_facing_2d == 3"
                        },
                        {
                            "east": "query.cardinal_facing_2d == 5"
                        }
                    ]
                },
                "east": {
                    "on_entry": [
                        "/say 3"
                    ],
                    "transitions": [
                        {
                            "north": "query.cardinal_facing_2d == 2"
                        },
                        {
                            "south": "query.cardinal_facing_2d == 3"
                        },
                        {
                            "west": "query.cardinal_facing_2d == 4"
                        }
                    ]
                }
            }
        },
		"controller.animation.jump_speed_boost": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "prepareJumpBoost": "query.is_jumping && query.is_riding && ((query.get_ride -> query.owner_identifier) == 'rift:utahraptor' || (query.get_ride -> query.owner_identifier) == 'rift:direwolf' || (query.get_ride -> query.owner_identifier) == 'rift:megaloceros' || (query.get_ride -> query.owner_identifier) == 'rift:gallimimus')"
                        }
                    ]
                },
                "prepareJumpBoost": {
                    "transitions": [
                        {
                            "jumpBoost": "!query.is_jumping"
                        },
                        {
                            "default": "!query.is_riding || ((query.get_ride -> query.owner_identifier) != 'rift:utahraptor' && (query.get_ride -> query.owner_identifier) != 'rift:direwolf' && (query.get_ride -> query.owner_identifier) != 'rift:megaloceros' && (query.get_ride -> query.owner_identifier) != 'rift:gallimimus')"
                        }
                    ]
                },
                "jumpBoost": {
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.get_ride -> query.is_on_ground) || ((query.get_ride -> query.owner_identifier) != 'rift:utahraptor' && (query.get_ride -> query.owner_identifier) != 'rift:direwolf' && (query.get_ride -> query.owner_identifier) != 'rift:megaloceros' && (query.get_ride -> query.owner_identifier) != 'rift:gallimimus')"
                        }
                    ],
                    "on_entry": [
                        "/effect @e[type=rift:utahraptor, c=1, tag=tamed, tag=ridden, tag=!baby] speed 60 19",
                        "/effect @e[type=rift:direwolf, c=1, tag=tamed, tag=ignited, tag=ridden, tag=!baby] speed 60 19",
                        "/effect @e[type=rift:megaloceros, c=1, tag=tamed, tag=ridden, tag=!baby] speed 60 19",
                        "/effect @e[type=rift:gallimimus, tag=!sprinting, c=1, tag=tamed, tag=ridden, tag=!baby] speed 60 19"
                    ],
                    "on_exit": [
                        "/effect @e[type=rift:utahraptor, c=1, tag=tamed, tag=ridden, tag=!baby] speed 0",
                        "/effect @e[type=rift:direwolf, c=1, tag=tamed, tag=ignited, tag=ridden, tag=!baby] speed 0",
                        "/effect @e[type=rift:megaloceros, c=1, tag=tamed, tag=ridden, tag=!baby] speed 0",
                        "/effect @e[type=rift:gallimimus, tag=!sprinting, c=1, tag=tamed, tag=ridden, tag=!baby] speed 0"
                    ]
                }
            }
        },
        "controller.animation.detect_riding": {
			"initial_state": "default",
			"states": {
				"default": {
                    "transitions": [
                        {
                            "riding": "query.is_riding"
                        }
                    ]
                },
                "riding": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        }
                    ],
                    "on_entry": [
                        "/tag @s add riding"
                    ],
                    "on_exit": [
                        "/tag @s remove riding"
                    ]
                }
            }
        },
        "controller.animation.inform_riding_command_staff_usability": {
			"initial_state": "default",
			"states": {
				"default": {
                    "transitions": [
                        {
                            "riding": "query.is_riding && ((query.get_ride -> query.owner_identifier) == 'rift:tyrannosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:stegosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:triceratops' || (query.get_ride -> query.owner_identifier) == 'rift:utahraptor' || (query.get_ride -> query.owner_identifier) == 'rift:apatosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:parasaurolophus' || (query.get_ride -> query.owner_identifier) == 'rift:sarcosuchus' || (query.get_ride -> query.owner_identifier) == 'rift:anomalocaris' || (query.get_ride -> query.owner_identifier) == 'rift:saruophaganax' || (query.get_ride -> query.owner_identifier) == 'rift:direwolf' || (query.get_ride -> query.owner_identifier) == 'rift:megaloceros' || (query.get_ride -> query.owner_identifier) == 'rift:baryonyx' || (query.get_ride -> query.owner_identifier) == 'rift:ankylosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:dilophosaurus')"
                        }
                    ]
                },
                "riding": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Equip a command staff to be able to use this creature's ability, a harvest staff to make this creature harvest items from certain nearby blocks, or a command console to use the weapons on the back of this creature (if there are)!\"}]}"
                    ]
                }
            }
        },
        "controller.animation.inform_riding_has_command_staff_usability": {
			"initial_state": "default",
			"states": {
				"default": {
                    "transitions": [
                        {
                            "riding": "query.is_riding && query.get_equipped_item_name('main_hand') == 'command_staff' && ((query.get_ride -> query.owner_identifier) == 'rift:tyrannosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:stegosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:triceratops' || (query.get_ride -> query.owner_identifier) == 'rift:utahraptor' || (query.get_ride -> query.owner_identifier) == 'rift:apatosaurus' || (query.get_ride -> query.owner_identifier) == 'rift:parasaurolophus' || (query.get_ride -> query.owner_identifier) == 'rift:sarcosuchus' || (query.get_ride -> query.owner_identifier) == 'rift:anomalocaris' || (query.get_ride -> query.owner_identifier) == 'rift:saruophaganax' || (query.get_ride -> query.owner_identifier) == 'rift:direwolf' || (query.get_ride -> query.owner_identifier) == 'rift:megaloceros' || (query.get_ride -> query.owner_identifier) == 'rift:baryonyx')"
                        }
                    ]
                },
                "riding": {
                    "transitions": [
                        {
                            "default": "!query.is_riding || query.get_equipped_item_name('main_hand') != 'command_staff'"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Right click/tap and hold once to activate an ability, and right click and hold/tap and hold for a long time, then release to change the ability to be used.\"}]}"
                    ]
                }
            }
        },
        "controller.animation.comforting_death_message": {
			"initial_state": "default",
			"states": {
				"default": {
                    "transitions": [
                        {
                            "dead": "!query.is_alive"
                        }
                    ]
                },
                "dead": {
                    "transitions": [
                        {
                            "messageOne": "v.message = (math.floor(math.random(0,13))); return query.is_alive && v.message == 0;"
                        },
                        {
                            "messageTwo": " query.is_alive && v.message == 1"
                        },
                        {
                            "messageThree": " query.is_alive && v.message == 2"
                        },
                        {
                            "messageFour": " query.is_alive && v.message == 3"
                        },
                        {
                            "messageFive": " query.is_alive && v.message == 4"
                        },
                        {
                            "messageSix": " query.is_alive && v.message == 5"
                        },
                        {
                            "messageSeven": " query.is_alive && v.message == 6"
                        },
                        {
                            "messageEight": " query.is_alive && v.message == 7"
                        },
                        {
                            "messageNine": " query.is_alive && v.message == 8"
                        },
                        {
                            "messageTen": " query.is_alive && v.message == 9"
                        },
                        {
                            "messageEleven": " query.is_alive && v.message == 10"
                        },
                        {
                            "messageTwelve": " query.is_alive && v.message == 11"
                        },
                        {
                            "messageThirteen": " query.is_alive && v.message == 12"
                        }
                    ],
                    "on_entry": [
                        "/tag @s remove tenontoTarget"
                    ]
                },
                "messageOne": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Killed by a Tyrannosaurus unfairly? Complain on the Discord at https://discord.gg/qVWaKRMCRc!\"}]}"
                    ]
                },
                "messageTwo": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Next time try not dying, ok?\"}]}"
                    ]
                },
                "messageThree": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: lol\"}]}"
                    ]
                },
                "messageFour": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: What happened? Why is everything in tinted red? And why are there also two buttons on the screen?\"}]}"
                    ]
                },
                "messageFive": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: rip\"}]}"
                    ]
                },
                "messageSix": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: haha, owned\"}]}"
                    ]
                },
                "messageSeven": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Don't worry, you will meet your waifu in the afterlife!\"}]}"
                    ]
                },
                "messageEight": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: HA! NOOB!\"}]}"
                    ]
                },
                "messageNine": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: \\\"nomnomnom mmmmm tasty hooman flesh\\\" -whatever killed you, <insert year here>\"}]}"
                    ]
                },
                "messageTen": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Life's just cruel sometimes\"}]}"
                    ]
                },
                "messageEleven": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Alt+F4 may solve your problems!\"}]}"
                    ]
                },
                "messageTwelve": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: Insert coin to try again\"}]}"
                    ]
                },
                "messageThirteen": {
                    "transitions": [
                        {
                            "default": "1.0"
                        }
                    ],
                    "on_entry": [
                        "/tellraw @s {\"rawtext\":[{\"text\":\"§7§oBorgyDudeMan whispers to you: It ain't worth your time dying all over again you know\"}]}"
                    ]
                }
            }
        }
	}
}